// portfolio-sequence-container-array.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <array>
#include <algorithm>

using namespace std;

void smiley_face(int i) {
    for (int j{1}; j <= i; ++j) {
        std::cout << "=)" << std::endl;
    }
}

void display(const std::array<int, 5>& arr) {
    std::cout << "[ ";
    for (auto i : arr) {
        std::cout << i << ", ";
    }
    std::cout << "]" << std::endl;
}

void test1() {
    std::cout << "\nTest1========================" << std::endl;
    std::array<int, 5> arr1{ 1,2,3,4,5 };
    std::array<int, 5> arr2;
    std::array<int, 10> arr3 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    display(arr1);
    display(arr2); //elements contain garbage data as uninitialized
    arr2 = { 10,20,30,40,50 };
    arr1[0] = 1000; //changes the 1, to 1000 in arr1
    arr1.at(1) = 2000; //changes the 2, to 2000 in arr1
    display(arr1);
    std::cout << "Array 1 contains " << arr1.size() << " elements." << std::endl;
    std::cout << "Array 2 contains " << arr2.size() << " elements." << std::endl;
    std::cout << "The front of Array 1 contains the element: " << arr1.front() << "." << std::endl;
    std::cout << "The back of Array 3 contains the element: " << arr3.back() << "." << std::endl;
    std::cout << "The front of Array 2 contains the element: " << arr2.front() << "." << std::endl;
    std::cout << "The back of Array 1 contains the element: " << arr1.back() << "." << std::endl;
}

void test2() {
    std::cout << "\nTest2=========================" << std::endl;
    std::array<int, 5> arr1{ 1,2,3,4,5 };
    std::array<int, 5> arr2{10,20,30,40,50};
    display(arr1);
    display(arr2);
    arr1.fill(0); //fills whole array with 0.
    display(arr1);
    arr1.swap(arr2);
    display(arr1); //arr1 will now display 10,20,30,40,50
}

void test3() {
    std::cout << "\nTest3==========================" << std::endl;
    std::array<int, 5> arr1{ 1,2,3,4,5 };
    std::array<int, 5> arr2{}; //initialized to 0's
    int* ptr = arr1.data();
    std::cout << "The hexadeciaml address of the first element in the array is " << ptr << "." << std::endl; 
    *ptr = 10000;
    display(arr1);
    int* ptr2 = arr2.data();
    std::cout << *ptr2 << std::endl;
    *ptr2 = 10000;
    display(arr2);
    int* ptr3 = arr1.data();
}

void test4() {
    std::cout << "\nTest4==========================" << std::endl;
    std::array<int, 5> arr1{ 2,3,5,4,1 };
    display(arr1);
    std::sort(arr1.begin(), arr1.end()); //#include algorithm required
    display(arr1);
    std::array<int, 10>  arr2 {2, 5, 3, 4, 6, 8, 7, 9, 10};
    std::cout << "[ ";
    for (auto i : arr2) {
        std::cout << i << ", ";
    }
    std::cout << "]" << std::endl;
    std::sort(arr2.begin(), arr2.end());
    std::cout << "[ ";
    for(auto i : arr2) {
        std::cout << i << ", ";
    }
    std::cout << "]" << std::endl;
}

void test5() {
    std::cout << "\nTest5=============================" << std::endl;
    std::array <int, 5> arr1 {9, 3, 3, 5, 4};
    std::array <int, 5> ::iterator min_num = std::min_element(arr1.begin(), arr1.end()); //std::array iterator called min_num set to the min_element over arr1 begin and end.
    auto max_num = std::max_element(arr1.begin(), arr1.end()); //second iterator auto used for type, max_element over arr1 begin and end. 
    std::cout << "Max element in Array: " << *max_num << "." << std::endl;
    std::cout << "Min element in Array: " << *min_num << "." << std::endl;
}

void test6() {
    std::array <int, 5> arr1{ 2,3,3,4,5 };
    std::array <int, 5> arr2{ 1,2,3,4,5 };
    auto adjacent = std::adjacent_find(arr1.begin(), arr1.end());
    if (adjacent != arr1.end())
        std::cout << "Adjacent element found with value: " << *adjacent << std::endl;
    else
        std::cout << "No adjacent elements found." << std::endl;
    adjacent = std::adjacent_find(arr2.begin(), arr2.end());
    if (adjacent != arr2.end())
        std::cout << "Adjacent element found with value: " << *adjacent << std::endl;
    else
        std::cout << "No adjacent element found." << std::endl;
}

int main()
{
  //std::array <int, 5> a_ex {1, 2,2,3,4};
  //display(a_ex); #display function test#
    test1();
    test2();
    test3();
    test4();
    test5();
    test6();
    std::cout << "Smiley count: ";
    int select1;
    cin >> select1;
    smiley_face(select1);
    return 0;
}
